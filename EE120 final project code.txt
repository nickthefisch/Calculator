// final project.cpp : Defines the entry point for the console application.
//

#include "stdafx.h" 
#include <iostream>
#include <windows.h> 
#include <stdio.h> 
using namespace std;

extern "C" {
#include "usbi2cio.h" 
} //Button press holder global vaiables
int i = 0;
int B0 = 0;//0 -> 10
int B1 = 0;//1
int B2 = 0;//2
int B3 = 0;//3
int B4 = 0;//4
int B5 = 0;//5
int B6 = 0;//6
int B7 = 0;//7
int B8 = 0;//8
int B9 = 0;//9
char BA = 0;//A - addition
char BB = 0;//B - subtraction
char BC = 0;//C - clear
char BD = 0;//D - division
char BS = 0;//star - multiplication 
char BP = 0;//pound - equals
long write;
long Port_CB;
float solution;

//input arrays

float integerinput[6] = {}; //array to store input
float sequenceinput[6] = {}; //array stores 1 for integers and -1 for operators
char operatorinput[6] = {}; //array to store operators

int integercount = 0;
int operatorcount = 0;
int sequencecount = 0;

//functions 

void calculateaddition();
void calculatesubtraction();
void calculatemultiplication();
void calculatedivision();
void clear();
void error();
void solutiondisplay(int enablelatch, int solution);

void __cdecl main(void) {
	HANDLE hDevInstance = INVALID_HANDLE_VALUE;	//Device instance handle

	hDevInstance = DAPI_OpenDeviceInstance("UsbI2cIo", 0); //attempt to open device UsbI2cIo (instance 0 of the device)

	DAPI_ConfigIoPorts(hDevInstance, 0x000F0000); // 0 = output, 1 = input
	cout << "Config done" << endl;                // PC are inputs
	// PC are HIGH, PB4-7 LOW, Enable latch 1, output zero
	long output;
	long *pointer = &output;
	long values[4] = { 0xF7000, 0xFB000, 0xFD000, 0xFE000 };
	long key = 0x000F0000;
	long *point = &key;

	//DAPI_WriteIoPorts(hDevInstance, output, 0xFFFFFFFF);
	//DAPI_WriteIoPorts(hDevInstance, 0x00000FE7, 0xFFFFFFFF);

	while (1){
		DAPI_ReadIoPorts(hDevInstance, pointer);
		Sleep(200);

		for (int count = 0; count < 4; count++){
			write = values[count];

			DAPI_WriteIoPorts(hDevInstance, write, 0x000FF000); // scanner
			DAPI_ReadIoPorts(hDevInstance, point); // read the scanner 

			Port_CB = (key & 0x000FF000) >> 12;

			if (Port_CB == 0x77) {
				cout << "1 ";
				B1 = 1;
				integerinput[integercount] = B1;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000FFA, 0xFFFFFFFF);

			}
			else if (Port_CB == 0xB7) {
				cout << "2 ";
				B2 = 2;
				integerinput[integercount] = B2;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F64, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xD7) {
				cout << "3 ";
				B3 = 3;
				integerinput[integercount] = B3;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F70, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xE7) { // button A = addition
				cout << "+ ";
				BA = '+';
				operatorinput[operatorcount] = BA;
				operatorcount++;
				sequenceinput[sequencecount] = -1;
				sequencecount++;

			}
			else if (Port_CB == 0x7B) {
				cout << "4 ";
				B4 = 4;
				integerinput[integercount] = B4;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000FB2, 0xFFFFFFFF);

			}
			else if (Port_CB == 0xBB) {
				cout << "5 ";
				B5 = 5;
				integerinput[integercount] = B5;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F31, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xDB) {
				cout << "6 ";
				B6 = 6;
				integerinput[integercount] = B6;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F21, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xEB) { // button B = subtraction
				cout << "- ";
				BB = '-';
				operatorinput[operatorcount] = BB;
				operatorcount++;
				sequenceinput[sequencecount] = -1;
				sequencecount++;

			}
			else if (Port_CB == 0x7D) {
				cout << "7 ";
				B7 = 7;
				integerinput[integercount] = B7;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F3A, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xBD) {
				cout << "8 ";
				B8 = 8;
				integerinput[integercount] = B8;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F20, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xDD) {
				cout << "9 ";
				B9 = 9;
				integerinput[integercount] = B9;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F32, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xED) { // button C = clear
				BC = 'C';
				operatorinput[operatorcount] = BC;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F28, 0xFFFFFFFF);
				clear();
			}
			else if (Port_CB == 0x7E) {// button * = multiply
				cout << "* ";
				BS = '*';
				operatorinput[operatorcount] = BS;
				operatorcount++;
				sequenceinput[sequencecount] = -1;
				sequencecount++;
			}
			else if
				(Port_CB == 0xBE) {
				cout << "0 ";
				B0 = 0;
				integerinput[integercount] = B0;
				integercount++;
				sequenceinput[sequencecount] = 1;
				sequencecount++;
				DAPI_WriteIoPorts(hDevInstance, 0x00000F28, 0xFFFFFFFF);
			}
			else if (Port_CB == 0xDE) { // button # = equals
				cout << "= ";
				BP = '=';
				operatorinput[operatorcount] = BP;
				operatorcount++;
				sequenceinput[sequencecount] = -1;
				sequencecount++;

				calculateaddition(); //call functions to do calculator things after = has been pressed
				calculatesubtraction();
				calculatemultiplication();
				calculatedivision();
			}
			else if (Port_CB == 0xEE) { // button D = division
				cout << "/ ";
				BD = '/';
				operatorinput[operatorcount] = BD;
				operatorcount++;
				sequenceinput[sequencecount] = -1;
				sequencecount++;
			}

		} //for loop end

		//}//exit while loop
	}//END Infinite While Loop
}//END Main


void calculateaddition() {	// function to calculate values
	int answerdisplay, decimal, tenths, hundreds, single;
	if (operatorinput[0] == '+'){
		//function test
		//cout << "integers: " << integerinput[0] << " " << integerinput[1] << " " << integerinput[2] << " " << integerinput[3] << endl;
		//cout << "operator: " << operatorinput[0] << " " << operatorinput[1] << endl;
		//cout << "sequence: " << sequenceinput[0] << " " << sequenceinput[1] << " " << sequenceinput[2] << " " << sequenceinput[3] << " " << sequenceinput[4] << " " << sequenceinput[5] << endl;

		if ((sequenceinput[1] == -1) && (sequenceinput[3] == -1)){
			solution = integerinput[0] + integerinput[1];
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[4] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) + integerinput[2];
		}
		else if ((sequenceinput[1] == -1) && (sequenceinput[4] == -1)){
			solution = integerinput[0] + ((10 * integerinput[1]) + integerinput[2]);
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[5] == -1)){
			solution = (((10 * integerinput[0]) + integerinput[1]) + ((10 * integerinput[2]) + integerinput[3]));
		}
		if (solution > 999.9){
			error(); //call error function
		}
		else {
			cout << solution << endl;
		}

		integercount = 0;		// reset counters to zero
		operatorcount = 0;
		sequencecount = 0;

		for (int reset = 0; reset < 6; reset++){ //reset contents of arrays to 0
			integerinput[reset] = 0;
			operatorinput[reset] = 0;
			sequenceinput[reset] = 0;
		}
	}
	answerdisplay = solution * 10;
	decimal = answerdisplay % 10;
	single = (answerdisplay % 100) / 10;
	tenths = (answerdisplay % 1000) / 100;
	hundreds = (answerdisplay % 10000) / 1000;

	solutiondisplay(1, decimal);
	solutiondisplay(2, single);
	solutiondisplay(3, tenths);
	solutiondisplay(4, hundreds);
}

void calculatesubtraction() {
	int answerdisplay, decimal, tenths, hundreds, single;
	if (operatorinput[0] == '-'){
		//function test
		//cout << "integers: " << integerinput[0] << " " << integerinput[1] << " " << integerinput[2] << " " << integerinput[3] << endl;
		//cout << "operator: " << operatorinput[0] << " " << operatorinput[1] << endl;
		//cout << "sequence: " << sequenceinput[0] << " " << sequenceinput[1] << " " << sequenceinput[2] << " " << sequenceinput[3] << " " << sequenceinput[4] << " " << sequenceinput[5] << endl;

		if ((sequenceinput[1] == -1) && (sequenceinput[3] == -1)){
			solution = integerinput[0] - integerinput[1];
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[4] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) - integerinput[2];
		}
		else if ((sequenceinput[1] == -1) && (sequenceinput[4] == -1)){
			solution = integerinput[0] - ((10 * integerinput[1]) + integerinput[2]);
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[5] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) - ((10 * integerinput[2]) + integerinput[3]);

		}

		if (solution < .1){
			error(); //call error function
		} else {
			cout << solution << endl;
		}

		integercount = 0;		// reset counters to zero
		operatorcount = 0;
		sequencecount = 0;

		for (int reset = 0; reset < 6; reset++){ //reset contents of arrays to 0
			integerinput[reset] = 0;
			operatorinput[reset] = 0;
			sequenceinput[reset] = 0;
		}
	}
	answerdisplay = solution * 10;
	decimal = answerdisplay % 10;
	single = (answerdisplay % 100) / 10;
	tenths = (answerdisplay % 1000) / 100;
	hundreds = (answerdisplay % 10000) / 1000;

	solutiondisplay(1, decimal);
	solutiondisplay(2, single);
	solutiondisplay(3, tenths);
	solutiondisplay(4, hundreds);

}

void calculatemultiplication(){
	int answerdisplay, decimal, tenths, hundreds, single;
	if (operatorinput[0] == '*'){
		//function test
		//cout << "integers: " << integerinput[0] << " " << integerinput[1] << " " << integerinput[2] << " " << integerinput[3] << endl;
		//cout << "operator: " << operatorinput[0] << " " << operatorinput[1] << endl;
		//cout << "sequence: " << sequenceinput[0] << " " << sequenceinput[1] << " " << sequenceinput[2] << " " << sequenceinput[3] << " " << sequenceinput[4] << " " << sequenceinput[5] << endl;

		if ((sequenceinput[1] == -1) && (sequenceinput[3] == -1)){

			solution = integerinput[0] * integerinput[1];
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[4] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) * integerinput[2];
		}
		else if ((sequenceinput[1] == -1) && (sequenceinput[4] == -1)){
			solution = integerinput[0] * ((10 * integerinput[1]) + integerinput[2]);
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[5] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) * ((10 * integerinput[2]) + integerinput[3]);
		}

		if (solution > 999.9){
			error(); //call error function
		}
		else {
			cout << solution << endl;
		}

		integercount = 0;		// reset counters to zero
		operatorcount = 0;
		sequencecount = 0;

		for (int reset = 0; reset < 6; reset++){ //reset contents of arrays to 0
			integerinput[reset] = 0;
			operatorinput[reset] = 0;
			sequenceinput[reset] = 0;
		}
	}
	answerdisplay = solution * 10;
	decimal = answerdisplay % 10;
	single = (answerdisplay % 100) / 10;
	tenths = (answerdisplay % 1000) / 100;
	hundreds = (answerdisplay % 10000) / 1000;

	solutiondisplay(1, decimal);
	solutiondisplay(2, single);
	solutiondisplay(3, tenths);
	solutiondisplay(4, hundreds);
}
void calculatedivision(){
	int answerdisplay, decimal, tenths, hundreds, single;
	if (operatorinput[0] == '/'){
		// function test 
		//cout << "integers: " << integerinput[0] << " " << integerinput[1] << " " << integerinput[2] << " " << integerinput[3] << endl;
		//cout << "operator: " << operatorinput[0] << " " << operatorinput[1] << endl;
		//cout << "sequence: " << sequenceinput[0] << " " << sequenceinput[1] << " " << sequenceinput[2] << " " << sequenceinput[3] << " " << sequenceinput[4] << " " << sequenceinput[5] << endl;

		if ((sequenceinput[1] == -1) && (sequenceinput[3] == -1)){
			solution = integerinput[0] / integerinput[1];
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[4] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) / integerinput[2];
		}
		else if ((sequenceinput[1] == -1) && (sequenceinput[4] == -1)){
			solution = integerinput[0] / ((10 * integerinput[1]) + integerinput[2]);
		}
		else if ((sequenceinput[2] == -1) && (sequenceinput[5] == -1)){
			solution = ((10 * integerinput[0]) + integerinput[1]) / ((10 * integerinput[2]) + integerinput[3]);
		}

		integercount = 0;		// reset counters to zero
		operatorcount = 0;
		sequencecount = 0;

		for (int reset = 0; reset < 6; reset++){ //reset contents of arrays to 0
			integerinput[reset] = 0;
			operatorinput[reset] = 0;
			sequenceinput[reset] = 0;
		}
	}
	answerdisplay = solution * 10;
	decimal = answerdisplay % 10;
	single = (answerdisplay % 100) / 10;
	tenths = (answerdisplay % 1000) / 100;
	hundreds = (answerdisplay % 10000) / 1000;

	solutiondisplay(1, decimal);
	solutiondisplay(2, single);
	solutiondisplay(3, tenths);
	solutiondisplay(4, hundreds);
}

void clear(){
	if (Port_CB == 0xED){
		cout << "CLR" << endl;
		integercount = 0;		// reset counters to zero
		operatorcount = 0;
		sequencecount = 0;

		for (int reset = 0; reset < 6; reset++){ //reset contents of arrays to 0
			integerinput[reset] = 0;
			operatorinput[reset] = 0;
			sequenceinput[reset] = 0;
		}
	}
	// function test
	//cout << "integers: " << integerinput[0] << " " << integerinput[1] << " " << integerinput[2] << " " << integerinput[3] << endl;
	//cout << "operator: " << operatorinput[0] << " " << operatorinput[1] << endl;
	//cout << "sequence: " << sequenceinput[0] << " " << sequenceinput[1] << " " << sequenceinput[2] << " " << sequenceinput[3] << " " << sequenceinput[4] << " " << sequenceinput[5] << endl;
	//cout << "clear worked!" << endl;

}

void error() {
	cout << "Error" << endl;

	HANDLE hDevInst = INVALID_HANDLE_VALUE;	//Device instance handle
	hDevInst = DAPI_OpenDeviceInstance("UsbI2cIo", 0);

	DAPI_WriteIoPorts(hDevInst, 0x00000125, 0xFFFFFFFF);
	DAPI_WriteIoPorts(hDevInst, 0x00000025, 0xFFFFFFFF);

	DAPI_WriteIoPorts(hDevInst, 0x000002E7, 0xFFFFFFFF);
	DAPI_WriteIoPorts(hDevInst, 0x000000E7, 0xFFFFFFFF);

	DAPI_WriteIoPorts(hDevInst, 0x000004E7, 0xFFFFFFFF);
	DAPI_WriteIoPorts(hDevInst, 0x000000E7, 0xFFFFFFFF);

	DAPI_WriteIoPorts(hDevInst, 0x00000828, 0xFFFFFFFF);
	DAPI_WriteIoPorts(hDevInst, 0x00000028, 0xFFFFFFFF);

	DAPI_WriteIoPorts(hDevInst, 0x000000FF, 0xFFFFFFFF);
}

void solutiondisplay(int enablelatch, int solution) {
	long LD = 0;
	HANDLE hDevInstagram = INVALID_HANDLE_VALUE;
	hDevInstagram = DAPI_OpenDeviceInstance("UsbI2cIo", 0);

	if (enablelatch == 4) {
		if (solution == 0) LD = 0x128;
		else if (solution == 1) LD = 0x1FA;
		else if (solution == 2) LD = 0x164;
		else if (solution == 3) LD = 0x170;
		else if (solution == 4) LD = 0x1B2;
		else if (solution == 5) LD = 0x131;
		else if (solution == 6) LD = 0x121;
		else if (solution == 7) LD = 0x13A;
		else if (solution == 8) LD = 0x120;
		else if (solution == 9) LD = 0x132;
	}
	else if (enablelatch == 3) {
		if (solution == 0) LD = 0x228;
		else if (solution == 1) LD = 0x2FA;
		else if (solution == 2) LD = 0x264;
		else if (solution == 3) LD = 0x270;
		else if (solution == 4) LD = 0x2B2;
		else if (solution == 5) LD = 0x231;
		else if (solution == 6) LD = 0x221;
		else if (solution == 7) LD = 0x23A;
		else if (solution == 8) LD = 0x220;
		else if (solution == 9) LD = 0x232;
	}
	else if (enablelatch == 2) {
		if (solution == 0) LD = 0x428;
		else if (solution == 1) LD = 0x4FA;
		else if (solution == 2) LD = 0x464;
		else if (solution == 3) LD = 0x470;
		else if (solution == 4) LD = 0x4B2;
		else if (solution == 5) LD = 0x431;
		else if (solution == 6) LD = 0x421;
		else if (solution == 7) LD = 0x43A;
		else if (solution == 8) LD = 0x420;
		else if (solution == 9) LD = 0x432;
	}
	else if (enablelatch == 1) {
		if (solution == 0) LD = 0x828;
		else if (solution == 1) LD = 0x8FA;
		else if (solution == 2) LD = 0x864;
		else if (solution == 3) LD = 0x870;
		else if (solution == 4) LD = 0x8B2;
		else if (solution == 5) LD = 0x831;
		else if (solution == 6) LD = 0x821;
		else if (solution == 7) LD = 0x83A;
		else if (solution == 8) LD = 0x820;
		else if (solution == 9) LD = 0x832;
	}

	DAPI_WriteIoPorts(hDevInstagram, 0x00000000, 0x00000FFF);
	DAPI_WriteIoPorts(hDevInstagram, LD, 0x00000FFF);
	DAPI_WriteIoPorts(hDevInstagram, 0x0000000, 0x00000F00);

}
